# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    timezone: '%env(APP_TIMEZONE)%'
    telegram_api_token: '%env(resolve:TELEGRAM_API_TOKEN)%'
    telegram_chat_id: '%env(resolve:TELEGRAM_CHAT_ID)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    admin.article:
        class: App\Admin\ArticleAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\Article, manager_type: orm, label: Article }
            
    pudding.event.article_create_listener:
        class: App\EventListener\ArticleListener
        tags:
            - { name: kernel.event_listener, event: sonata.admin.event.persistence.pre_persist, method: setDateTime }
            - { name: doctrine.event_listener, event: onFlush, method: onFlush }
            
    security.csrf.same_origin_token_manager:
        class: App\Security\CSRF\MyTokenManager
        decorates: security.csrf.token_manager
        arguments:
          - '@request_stack'
          - '@logger'
          - '@.inner'
#          - !abstract 'framework.csrf_protection.stateless_token_ids'
#          - !abstract 'framework.csrf_protection.check_header'
#          - !abstract 'framework.csrf_protection.cookie_name'
        tags:
          - { name: monolog.logger, channel: 'request' }
          - { name: kernel.event_listener, event: 'kernel.response', method: 'onKernelResponse' }
          
#    pudding.event.new_order_mail_listener:
#        class: App\EventListener\NewOrderMailListener
#        tags:
#            - { name: kernel.event_listener, event: App\Event\NewOrderEvent, method: sendOrderEmail }
            
    pudding.event.new_order_telegram_listener:
        class: App\EventListener\NewOrderTelegramListener
        tags:
            - { name: kernel.event_listener, event: App\Event\NewOrderEvent, method: sendOrderTelegram }